# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: Vision API
    version: v1alpha1
servers:
    - url: https://vision.animeapis.com
paths:
    /v1alpha1/users/{user}/albums/{album}/images/{image}/analyses:
        get:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_ListImageAnalyses
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: album
                  in: path
                  description: The album id.
                  required: true
                  schema:
                    type: string
                - name: image
                  in: path
                  description: The image id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: If unspecified, server will pick an appropriate default.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: The value returned from the previous call.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ListImageAnalysesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
    /v1alpha1/users/{user}/albums/{album}/images/{image}/analyses/{analyse}:
        get:
            tags:
                - ImageAnnotator
            description: 'Note: to fetch the latest available report use "latest" as report id.'
            operationId: ImageAnnotator_GetImageAnalysis
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: album
                  in: path
                  description: The album id.
                  required: true
                  schema:
                    type: string
                - name: image
                  in: path
                  description: The image id.
                  required: true
                  schema:
                    type: string
                - name: analyse
                  in: path
                  description: The analyse id.
                  required: true
                  schema:
                    type: string
                - name: fieldMask
                  in: query
                  description: FieldMask that represents which fields should be retrieved.
                  schema:
                    type: string
                    format: field-mask
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnalysis'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
        delete:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_DeleteImageAnalysis
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: album
                  in: path
                  description: The album id.
                  required: true
                  schema:
                    type: string
                - name: image
                  in: path
                  description: The image id.
                  required: true
                  schema:
                    type: string
                - name: analyse
                  in: path
                  description: The analyse id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
    /v1alpha1/users/{user}/albums/{album}/images/{image}:analyze:
        post:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_AnalyzeImage
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: album
                  in: path
                  description: The album id.
                  required: true
                  schema:
                    type: string
                - name: image
                  in: path
                  description: The image id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/animeshon.vision.v1alpha1.AnalyzeImageRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.AnalyzeImageResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
    /v1alpha1/users/{user}/imageAnnotations:
        get:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_ListImageAnnotations
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: If unspecified, server will pick an appropriate default.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: The value returned from the previous call.
                  schema:
                    type: string
                - name: filter
                  in: query
                  description: 'A filter to be applied to results. Currently accepted filters include: - resource:{full resource name}'
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ListImageAnnotationsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
        post:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_CreateImageAnnotation
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/animeshon.vision.v1alpha1.CreateImageAnnotationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
    /v1alpha1/users/{user}/imageAnnotations/{imageAnnotation}:
        get:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_GetImageAnnotation
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: imageAnnotation
                  in: path
                  description: The imageAnnotation id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
        delete:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_DeleteImageAnnotation
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: imageAnnotation
                  in: path
                  description: The imageAnnotation id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
        patch:
            tags:
                - ImageAnnotator
            operationId: ImageAnnotator_UpdateImageAnnotation
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: imageAnnotation
                  in: path
                  description: The imageAnnotation id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/animeshon.vision.v1alpha1.UpdateImageAnnotationRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/google.rpc.Status'
components:
    schemas:
        animeshon.vision.v1alpha1.AnalyzeImageRequest:
            required:
                - parent
                - features
            type: object
            properties:
                parent:
                    type: string
                    description: The parent image to be analyzed.
                features:
                    type: array
                    items:
                        type: string
                    description: A list of features to analyze.
        animeshon.vision.v1alpha1.AnalyzeImageResponse:
            type: object
            properties:
                analysis:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnalysis'
        animeshon.vision.v1alpha1.BoundingPoly:
            type: object
            properties:
                vertices:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.Vertex'
                    description: The bounding polygon vertices.
            description: A bounding polygon for the detected image annotation.
        animeshon.vision.v1alpha1.ColorProperty:
            type: object
            properties:
                color:
                    $ref: '#/components/schemas/google.type.Color'
                score:
                    type: number
                    description: Image-specific score for this color. Value in range [0, 1].
                    format: float
                pixelFraction:
                    type: number
                    description: The fraction of pixels the color occupies in the image. Value in range [0, 1].
                    format: float
            description: Color information consists of RGB channels, score, and the fraction of the image that the color occupies in the image.
        animeshon.vision.v1alpha1.CreateImageAnnotationRequest:
            type: object
            properties:
                parent:
                    type: string
                    description: The parent this image annotation belongs to.
                annotation:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
        animeshon.vision.v1alpha1.EntityAnnotation:
            type: object
            properties:
                name:
                    type: string
                    description: The entity resource name.
                score:
                    type: number
                    description: Overall score of the result. Range [0, 1].
                    format: float
                boundingBox:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.BoundingPoly'
        animeshon.vision.v1alpha1.FingerprintProperty:
            type: object
            properties:
                content:
                    type: string
                    description: The fingerprint of the image in binary representation.
                    format: bytes
                algorithm:
                    type: string
                    description: The algorithm used to generate the fingerprint.
        animeshon.vision.v1alpha1.ImageAnalysis:
            type: object
            properties:
                name:
                    type: string
                    description: The name of the image analysis.
                properties:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageProperties'
                annotations:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotations'
                createTime:
                    type: string
                    description: The creation time indicating when this revision was created.
                    format: date-time
            description: 'TODO: add information about the model used and whether the analysis is STABLE TODO: or EXPERIMENTAL. NOTE: Latest should return the latest STABLE analysis.'
        animeshon.vision.v1alpha1.ImageAnnotation:
            type: object
            properties:
                name:
                    type: string
                    description: The annotation resource name.
                resource:
                    type: string
                    description: The annotated image.
                annotations:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotations'
                createTime:
                    readOnly: true
                    type: string
                    description: The timestamp at which the annotation was created.
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    description: The latest timestamp at which the annotation was updated.
                    format: date-time
        animeshon.vision.v1alpha1.ImageAnnotations:
            type: object
            properties:
                textAnnotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.TextAnnotation'
                    description: The texts detected in the image.
                labelAnnotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.LabelAnnotation'
                    description: The labels detected in the image.
                entityAnnotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.EntityAnnotation'
                    description: The entites detected in the image.
                knowledgeGraphAnnotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.KnowledgeGraphAnnotation'
                    description: The Animeshon Graph Knowledge-Base resources detected in the image.
                webSearchAnnotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.WebSearchAnnotation'
                    description: The WebSearch resources (pages and images) detected in the image.
                safeSearchAnnotation:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.SafeSearchAnnotation'
        animeshon.vision.v1alpha1.ImageProperties:
            type: object
            properties:
                dominantColors:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.ColorProperty'
                    description: Set of dominant colors and their corresponding scores.
                fingerprints:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.FingerprintProperty'
                    description: The fingerprints of the image.
        animeshon.vision.v1alpha1.KnowledgeGraphAnnotation:
            type: object
            properties:
                resource:
                    type: string
                    description: The Animeshon Graph Knowledge-Base resource name.
                score:
                    type: number
                    description: Overall score of the result. Range [0, 1].
                    format: float
                boundingBox:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.BoundingPoly'
        animeshon.vision.v1alpha1.LabelAnnotation:
            type: object
            properties:
                name:
                    type: string
                    description: The label resource name.
                score:
                    type: number
                    description: Overall score of the result. Range [0, 1].
                    format: float
                topicality:
                    type: number
                    description: The relevancy of the annotation. Range [0, 1].
                    format: float
        animeshon.vision.v1alpha1.ListImageAnalysesResponse:
            type: object
            properties:
                analyses:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnalysis'
                    description: The list of image analyses.
                nextPageToken:
                    type: string
                    description: A token to retrieve next page of results.
        animeshon.vision.v1alpha1.ListImageAnnotationsResponse:
            type: object
            properties:
                annotations:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
                    description: The list of image annotations.
                nextPageToken:
                    type: string
                    description: A token to retrieve next page of results.
        animeshon.vision.v1alpha1.SafeSearchAnnotation:
            type: object
            properties:
                adult:
                    enum:
                        - UNKNOWN
                        - VERY_UNLIKELY
                        - UNLIKELY
                        - POSSIBLE
                        - LIKELY
                        - VERY_LIKELY
                    type: string
                    description: Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.
                    format: enum
                racy:
                    enum:
                        - UNKNOWN
                        - VERY_UNLIKELY
                        - UNLIKELY
                        - POSSIBLE
                        - LIKELY
                        - VERY_LIKELY
                    type: string
                    description: Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.
                    format: enum
                violence:
                    enum:
                        - UNKNOWN
                        - VERY_UNLIKELY
                        - UNLIKELY
                        - POSSIBLE
                        - LIKELY
                        - VERY_LIKELY
                    type: string
                    description: Likelihood that this image contains violent content.
                    format: enum
                medical:
                    enum:
                        - UNKNOWN
                        - VERY_UNLIKELY
                        - UNLIKELY
                        - POSSIBLE
                        - LIKELY
                        - VERY_LIKELY
                    type: string
                    description: Likelihood that this is a medical image.
                    format: enum
                juvenile:
                    enum:
                        - UNKNOWN
                        - VERY_UNLIKELY
                        - UNLIKELY
                        - POSSIBLE
                        - LIKELY
                        - VERY_LIKELY
                    type: string
                    description: Likelihood that the request image contains one or more individuals decipted as juveniles. Juvenile content may contain elements such as school-aged children, preschoolers, toddlers, infants, and newborns. The target age considered as juvenile is from 0 to 14~16 years old.
                    format: enum
        animeshon.vision.v1alpha1.TextAnnotation:
            type: object
            properties:
                property:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.TextAnnotation_TextProperty'
                boundingBox:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.BoundingPoly'
                text:
                    type: string
                    description: UTF-8 text detected by the OCR.
                confidence:
                    type: number
                    description: Confidence of the OCR results for the paragraph. Range [0, 1].
                    format: float
        animeshon.vision.v1alpha1.TextAnnotation_Language:
            type: object
            properties:
                languageCode:
                    type: string
                    description: The BCP-47 language code, such as "en-US" or "sr-Latn".
                confidence:
                    type: number
                    description: Confidence of detected language. Range [0, 1].
                    format: float
            description: Detected language for a structural component.
        animeshon.vision.v1alpha1.TextAnnotation_TextProperty:
            type: object
            properties:
                languages:
                    type: array
                    items:
                        $ref: '#/components/schemas/animeshon.vision.v1alpha1.TextAnnotation_Language'
                    description: A list of detected languages together with confidence.
            description: Additional information detected on the structural component.
        animeshon.vision.v1alpha1.UpdateImageAnnotationRequest:
            type: object
            properties:
                annotation:
                    $ref: '#/components/schemas/animeshon.vision.v1alpha1.ImageAnnotation'
                updateMask:
                    type: string
                    description: The field mask to determine which fields are to be updated. If empty, the server will assume all fields are to be updated.
                    format: field-mask
        animeshon.vision.v1alpha1.Vertex:
            type: object
            properties:
                x:
                    type: integer
                    description: X coordinate.
                    format: int32
                y:
                    type: integer
                    description: Y coordinate.
                    format: int32
            description: 'A vertex represents a 2D point in the image. NOTE: the vertex coordinates are in the same scale as the original image.'
        animeshon.vision.v1alpha1.WebSearchAnnotation:
            type: object
            properties:
                url:
                    type: string
                    description: The result image URL.
                score:
                    type: number
                    description: Overall relevancy score for the image.
                    format: float
        google.protobuf.Any:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        google.protobuf.FloatValue:
            type: object
            properties:
                value:
                    type: number
                    description: The float value.
                    format: float
            description: Wrapper message for `float`. The JSON representation for `FloatValue` is JSON number.
        google.rpc.Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/google.protobuf.Any'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        google.type.Color:
            type: object
            properties:
                red:
                    type: number
                    description: The amount of red in the color as a value in the interval [0, 1].
                    format: float
                green:
                    type: number
                    description: The amount of green in the color as a value in the interval [0, 1].
                    format: float
                blue:
                    type: number
                    description: The amount of blue in the color as a value in the interval [0, 1].
                    format: float
                alpha:
                    $ref: '#/components/schemas/google.protobuf.FloatValue'
            description: 'Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to/from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor''s `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn''t carry information about the absolute color space that should be used to interpret the RGB value (e.g. sRGB, Adobe RGB, DCI-P3, BT.2020, etc.). By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most 1e-5. Example (Java):      import com.google.type.Color;      // ...      public static java.awt.Color fromProto(Color protocolor) {        float alpha = protocolor.hasAlpha()            ? protocolor.getAlpha().getValue()            : 1.0;        return new java.awt.Color(            protocolor.getRed(),            protocolor.getGreen(),            protocolor.getBlue(),            alpha);      }      public static Color toProto(java.awt.Color color) {        float red = (float) color.getRed();        float green = (float) color.getGreen();        float blue = (float) color.getBlue();        float denominator = 255.0;        Color.Builder resultBuilder =            Color                .newBuilder()                .setRed(red / denominator)                .setGreen(green / denominator)                .setBlue(blue / denominator);        int alpha = color.getAlpha();        if (alpha != 255) {          result.setAlpha(              FloatValue                  .newBuilder()                  .setValue(((float) alpha) / denominator)                  .build());        }        return resultBuilder.build();      }      // ... Example (iOS / Obj-C):      // ...      static UIColor* fromProto(Color* protocolor) {         float red = [protocolor red];         float green = [protocolor green];         float blue = [protocolor blue];         FloatValue* alpha_wrapper = [protocolor alpha];         float alpha = 1.0;         if (alpha_wrapper != nil) {           alpha = [alpha_wrapper value];         }         return [UIColor colorWithRed:red green:green blue:blue alpha:alpha];      }      static Color* toProto(UIColor* color) {          CGFloat red, green, blue, alpha;          if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) {            return nil;          }          Color* result = [[Color alloc] init];          [result setRed:red];          [result setGreen:green];          [result setBlue:blue];          if (alpha <= 0.9999) {            [result setAlpha:floatWrapperWithValue(alpha)];          }          [result autorelease];          return result;     }     // ...  Example (JavaScript):     // ...     var protoToCssColor = function(rgb_color) {        var redFrac = rgb_color.red || 0.0;        var greenFrac = rgb_color.green || 0.0;        var blueFrac = rgb_color.blue || 0.0;        var red = Math.floor(redFrac * 255);        var green = Math.floor(greenFrac * 255);        var blue = Math.floor(blueFrac * 255);        if (!(''alpha'' in rgb_color)) {           return rgbToCssColor(red, green, blue);        }        var alphaFrac = rgb_color.alpha.value || 0.0;        var rgbParams = [red, green, blue].join('','');        return [''rgba('', rgbParams, '','', alphaFrac, '')''].join('''');     };     var rgbToCssColor = function(red, green, blue) {       var rgbNumber = new Number((red << 16) | (green << 8) | blue);       var hexString = rgbNumber.toString(16);       var missingZeros = 6 - hexString.length;       var resultBuilder = [''#''];       for (var i = 0; i < missingZeros; i++) {          resultBuilder.push(''0'');       }       resultBuilder.push(hexString);       return resultBuilder.join('''');     };     // ...'
tags:
    - name: ImageAnnotator
